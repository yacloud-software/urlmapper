// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/exchnage/exchnage.proto
// DO NOT EDIT!

/*
Package exchnage is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/exchnage/exchnage.proto

It has these top-level messages:
	Calendar
	CalendarEntry
	CalendarRequest
	CalendarResponse
*/
package exchnage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// a users calendar
type Calendar struct {
	Entries []*CalendarEntry `protobuf:"bytes,1,rep,name=Entries" json:"Entries,omitempty"`
	ID      string           `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *Calendar) Reset()                    { *m = Calendar{} }
func (m *Calendar) String() string            { return proto.CompactTextString(m) }
func (*Calendar) ProtoMessage()               {}
func (*Calendar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Calendar) GetEntries() []*CalendarEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *Calendar) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

// a single entry in a calendar. expect this to grow more complicated
type CalendarEntry struct {
	ID          string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Summary     string `protobuf:"bytes,2,opt,name=Summary" json:"Summary,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description" json:"Description,omitempty"`
	Start       uint32 `protobuf:"varint,4,opt,name=Start" json:"Start,omitempty"`
	End         uint32 `protobuf:"varint,5,opt,name=End" json:"End,omitempty"`
}

func (m *CalendarEntry) Reset()                    { *m = CalendarEntry{} }
func (m *CalendarEntry) String() string            { return proto.CompactTextString(m) }
func (*CalendarEntry) ProtoMessage()               {}
func (*CalendarEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CalendarEntry) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *CalendarEntry) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *CalendarEntry) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CalendarEntry) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *CalendarEntry) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

type CalendarRequest struct {
	CalendarID string `protobuf:"bytes,1,opt,name=CalendarID" json:"CalendarID,omitempty"`
}

func (m *CalendarRequest) Reset()                    { *m = CalendarRequest{} }
func (m *CalendarRequest) String() string            { return proto.CompactTextString(m) }
func (*CalendarRequest) ProtoMessage()               {}
func (*CalendarRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CalendarRequest) GetCalendarID() string {
	if m != nil {
		return m.CalendarID
	}
	return ""
}

type CalendarResponse struct {
	Calendar    *Calendar `protobuf:"bytes,1,opt,name=Calendar" json:"Calendar,omitempty"`
	RetrievedAt uint32    `protobuf:"varint,2,opt,name=RetrievedAt" json:"RetrievedAt,omitempty"`
}

func (m *CalendarResponse) Reset()                    { *m = CalendarResponse{} }
func (m *CalendarResponse) String() string            { return proto.CompactTextString(m) }
func (*CalendarResponse) ProtoMessage()               {}
func (*CalendarResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CalendarResponse) GetCalendar() *Calendar {
	if m != nil {
		return m.Calendar
	}
	return nil
}

func (m *CalendarResponse) GetRetrievedAt() uint32 {
	if m != nil {
		return m.RetrievedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*Calendar)(nil), "exchnage.Calendar")
	proto.RegisterType((*CalendarEntry)(nil), "exchnage.CalendarEntry")
	proto.RegisterType((*CalendarRequest)(nil), "exchnage.CalendarRequest")
	proto.RegisterType((*CalendarResponse)(nil), "exchnage.CalendarResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ExchnageService service

type ExchnageServiceClient interface {
	// comment: get a users calendar from cache
	GetCalendar(ctx context.Context, in *CalendarRequest, opts ...grpc.CallOption) (*CalendarResponse, error)
}

type exchnageServiceClient struct {
	cc *grpc.ClientConn
}

func NewExchnageServiceClient(cc *grpc.ClientConn) ExchnageServiceClient {
	return &exchnageServiceClient{cc}
}

func (c *exchnageServiceClient) GetCalendar(ctx context.Context, in *CalendarRequest, opts ...grpc.CallOption) (*CalendarResponse, error) {
	out := new(CalendarResponse)
	err := grpc.Invoke(ctx, "/exchnage.ExchnageService/GetCalendar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExchnageService service

type ExchnageServiceServer interface {
	// comment: get a users calendar from cache
	GetCalendar(context.Context, *CalendarRequest) (*CalendarResponse, error)
}

func RegisterExchnageServiceServer(s *grpc.Server, srv ExchnageServiceServer) {
	s.RegisterService(&_ExchnageService_serviceDesc, srv)
}

func _ExchnageService_GetCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchnageServiceServer).GetCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchnage.ExchnageService/GetCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchnageServiceServer).GetCalendar(ctx, req.(*CalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExchnageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exchnage.ExchnageService",
	HandlerType: (*ExchnageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCalendar",
			Handler:    _ExchnageService_GetCalendar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/exchnage/exchnage.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/exchnage/exchnage.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x4d, 0x41, 0x04, 0xa7, 0x41, 0xc8, 0xc6, 0xc4, 0x95, 0x83, 0x69, 0x6a, 0x4c, 0x38, 0x95,
	0x50, 0xbf, 0x40, 0x2d, 0x31, 0x1c, 0xbc, 0x2c, 0x07, 0xcf, 0x6b, 0x77, 0x82, 0x4d, 0x60, 0xb7,
	0xee, 0x2e, 0x28, 0x67, 0x7f, 0xdc, 0xb4, 0x74, 0xdb, 0x1a, 0xb9, 0xcd, 0xbc, 0x79, 0x6f, 0x76,
	0xe6, 0xed, 0x40, 0xbc, 0x56, 0x1b, 0x2e, 0xd7, 0x51, 0xaa, 0xa4, 0xe6, 0xe2, 0x4b, 0x29, 0x11,
	0x49, 0xb4, 0x33, 0x9e, 0x67, 0x66, 0x86, 0xdf, 0xe9, 0x87, 0xe4, 0x6b, 0xac, 0x83, 0x28, 0xd7,
	0xca, 0x2a, 0x32, 0x70, 0x79, 0xf8, 0x0a, 0x83, 0x67, 0xbe, 0x41, 0x29, 0xb8, 0x26, 0x73, 0xe8,
	0x2f, 0xa4, 0xd5, 0x19, 0x1a, 0xea, 0x05, 0xdd, 0xa9, 0x1f, 0x5f, 0x47, 0xb5, 0xce, 0x91, 0x0a,
	0xc2, 0x81, 0x39, 0x1e, 0xb9, 0x84, 0xce, 0x32, 0xa1, 0x9d, 0xc0, 0x9b, 0x5e, 0xb0, 0xce, 0x32,
	0x09, 0x7f, 0x3c, 0x18, 0xfe, 0xa1, 0x56, 0x0c, 0xcf, 0x31, 0x08, 0x85, 0xfe, 0x6a, 0xb7, 0xdd,
	0x72, 0x7d, 0xa8, 0x64, 0x2e, 0x25, 0x01, 0xf8, 0x09, 0x9a, 0x54, 0x67, 0xb9, 0xcd, 0x94, 0xa4,
	0xdd, 0xb2, 0xda, 0x86, 0xc8, 0x15, 0xf4, 0x56, 0x96, 0x6b, 0x4b, 0xcf, 0x02, 0x6f, 0x3a, 0x64,
	0xc7, 0x84, 0x8c, 0xa1, 0xbb, 0x90, 0x82, 0xf6, 0x4a, 0xac, 0x08, 0xc3, 0x39, 0x8c, 0xdc, 0x10,
	0x0c, 0x3f, 0x77, 0x68, 0x2c, 0xb9, 0x05, 0x70, 0x50, 0x3d, 0x4e, 0x0b, 0x09, 0x05, 0x8c, 0x1b,
	0x89, 0xc9, 0x95, 0x34, 0x48, 0xa2, 0xc6, 0x9b, 0x52, 0xe1, 0xc7, 0xe4, 0xbf, 0x21, 0xac, 0xf1,
	0x2f, 0x00, 0x9f, 0x61, 0xe1, 0xcb, 0x1e, 0xc5, 0xa3, 0x2d, 0xd7, 0x1b, 0xb2, 0x36, 0x14, 0xbf,
	0xc1, 0x68, 0x51, 0x35, 0x58, 0xa1, 0xde, 0x67, 0x29, 0x92, 0x04, 0xfc, 0x17, 0xb4, 0x75, 0x8f,
	0x9b, 0x13, 0x2f, 0x1c, 0x57, 0x98, 0x4c, 0x4e, 0x95, 0x8e, 0xa3, 0x3e, 0xdd, 0xc3, 0x9d, 0x44,
	0xdb, 0xbe, 0x81, 0xea, 0x2a, 0x8a, 0x33, 0xa8, 0x75, 0xef, 0xe7, 0xe5, 0xf7, 0x3f, 0xfc, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x08, 0xb7, 0x46, 0x90, 0x34, 0x02, 0x00, 0x00,
}
