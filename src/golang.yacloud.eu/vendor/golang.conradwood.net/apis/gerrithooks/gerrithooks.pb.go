// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/gerrithooks/gerrithooks.proto
// DO NOT EDIT!

/*
Package gerrithooks is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/gerrithooks/gerrithooks.proto

It has these top-level messages:
	HookRequest
	HookResponse
	Repository
	Watcher
	Build
	CreateRepoRequest
	CreateRepoResponse
	Commit
*/
package gerrithooks

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// comment: message pingresponse
type HookRequest struct {
	Hostname    string   `protobuf:"bytes,1,opt,name=Hostname" json:"Hostname,omitempty"`
	Environment []string `protobuf:"bytes,2,rep,name=Environment" json:"Environment,omitempty"`
	Arguments   []string `protobuf:"bytes,3,rep,name=Arguments" json:"Arguments,omitempty"`
	HookName    string   `protobuf:"bytes,4,opt,name=HookName" json:"HookName,omitempty"`
}

func (m *HookRequest) Reset()                    { *m = HookRequest{} }
func (m *HookRequest) String() string            { return proto.CompactTextString(m) }
func (*HookRequest) ProtoMessage()               {}
func (*HookRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HookRequest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *HookRequest) GetEnvironment() []string {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *HookRequest) GetArguments() []string {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *HookRequest) GetHookName() string {
	if m != nil {
		return m.HookName
	}
	return ""
}

type HookResponse struct {
	ExitCode       int32    `protobuf:"varint,1,opt,name=ExitCode" json:"ExitCode,omitempty"`
	StdoutMessages []string `protobuf:"bytes,2,rep,name=StdoutMessages" json:"StdoutMessages,omitempty"`
}

func (m *HookResponse) Reset()                    { *m = HookResponse{} }
func (m *HookResponse) String() string            { return proto.CompactTextString(m) }
func (*HookResponse) ProtoMessage()               {}
func (*HookResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HookResponse) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *HookResponse) GetStdoutMessages() []string {
	if m != nil {
		return m.StdoutMessages
	}
	return nil
}

type Repository struct {
	ID     uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Server string `protobuf:"bytes,2,opt,name=Server" json:"Server,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *Repository) Reset()                    { *m = Repository{} }
func (m *Repository) String() string            { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()               {}
func (*Repository) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Repository) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Repository) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *Repository) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Watcher struct {
	ID       uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	ChangeID string `protobuf:"bytes,2,opt,name=ChangeID" json:"ChangeID,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=Email" json:"Email,omitempty"`
}

func (m *Watcher) Reset()                    { *m = Watcher{} }
func (m *Watcher) String() string            { return proto.CompactTextString(m) }
func (*Watcher) ProtoMessage()               {}
func (*Watcher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Watcher) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Watcher) GetChangeID() string {
	if m != nil {
		return m.ChangeID
	}
	return ""
}

func (m *Watcher) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type Build struct {
	ID        uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	CommitID  string `protobuf:"bytes,2,opt,name=CommitID" json:"CommitID,omitempty"`
	Project   string `protobuf:"bytes,3,opt,name=Project" json:"Project,omitempty"`
	URL       string `protobuf:"bytes,4,opt,name=URL" json:"URL,omitempty"`
	Timestamp uint32 `protobuf:"varint,5,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *Build) Reset()                    { *m = Build{} }
func (m *Build) String() string            { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()               {}
func (*Build) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Build) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Build) GetCommitID() string {
	if m != nil {
		return m.CommitID
	}
	return ""
}

func (m *Build) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Build) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Build) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type CreateRepoRequest struct {
	Name        string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
}

func (m *CreateRepoRequest) Reset()                    { *m = CreateRepoRequest{} }
func (m *CreateRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRepoRequest) ProtoMessage()               {}
func (*CreateRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateRepoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRepoRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CreateRepoResponse struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *CreateRepoResponse) Reset()                    { *m = CreateRepoResponse{} }
func (m *CreateRepoResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateRepoResponse) ProtoMessage()               {}
func (*CreateRepoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreateRepoResponse) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type Commit struct {
	ID             uint64      `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Repository     *Repository `protobuf:"bytes,2,opt,name=Repository" json:"Repository,omitempty"`
	ChangeID       string      `protobuf:"bytes,3,opt,name=ChangeID" json:"ChangeID,omitempty"`
	CommitID       string      `protobuf:"bytes,4,opt,name=CommitID" json:"CommitID,omitempty"`
	CommitterID    string      `protobuf:"bytes,5,opt,name=CommitterID" json:"CommitterID,omitempty"`
	CommitterEmail string      `protobuf:"bytes,6,opt,name=CommitterEmail" json:"CommitterEmail,omitempty"`
	Committed      uint32      `protobuf:"varint,7,opt,name=Committed" json:"Committed,omitempty"`
	FirstReview    uint32      `protobuf:"varint,8,opt,name=FirstReview" json:"FirstReview,omitempty"`
	ReviewerID     string      `protobuf:"bytes,9,opt,name=ReviewerID" json:"ReviewerID,omitempty"`
	ReviewedByDod  bool        `protobuf:"varint,10,opt,name=ReviewedByDod" json:"ReviewedByDod,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Commit) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Commit) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *Commit) GetChangeID() string {
	if m != nil {
		return m.ChangeID
	}
	return ""
}

func (m *Commit) GetCommitID() string {
	if m != nil {
		return m.CommitID
	}
	return ""
}

func (m *Commit) GetCommitterID() string {
	if m != nil {
		return m.CommitterID
	}
	return ""
}

func (m *Commit) GetCommitterEmail() string {
	if m != nil {
		return m.CommitterEmail
	}
	return ""
}

func (m *Commit) GetCommitted() uint32 {
	if m != nil {
		return m.Committed
	}
	return 0
}

func (m *Commit) GetFirstReview() uint32 {
	if m != nil {
		return m.FirstReview
	}
	return 0
}

func (m *Commit) GetReviewerID() string {
	if m != nil {
		return m.ReviewerID
	}
	return ""
}

func (m *Commit) GetReviewedByDod() bool {
	if m != nil {
		return m.ReviewedByDod
	}
	return false
}

func init() {
	proto.RegisterType((*HookRequest)(nil), "gerrithooks.HookRequest")
	proto.RegisterType((*HookResponse)(nil), "gerrithooks.HookResponse")
	proto.RegisterType((*Repository)(nil), "gerrithooks.Repository")
	proto.RegisterType((*Watcher)(nil), "gerrithooks.Watcher")
	proto.RegisterType((*Build)(nil), "gerrithooks.Build")
	proto.RegisterType((*CreateRepoRequest)(nil), "gerrithooks.CreateRepoRequest")
	proto.RegisterType((*CreateRepoResponse)(nil), "gerrithooks.CreateRepoResponse")
	proto.RegisterType((*Commit)(nil), "gerrithooks.Commit")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GerritHooks service

type GerritHooksClient interface {
	//
	// execute a hook. This is meant to be in a format so that
	// it does not require much parsing or logic on the client.
	// it throws an error if execution failed (not if code tests fail for example)
	GerritHook(ctx context.Context, in *HookRequest, opts ...grpc.CallOption) (*HookResponse, error)
	//
	// create a new repository, useful for 'create module from scratch builder'
	CreateRepository(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error)
}

type gerritHooksClient struct {
	cc *grpc.ClientConn
}

func NewGerritHooksClient(cc *grpc.ClientConn) GerritHooksClient {
	return &gerritHooksClient{cc}
}

func (c *gerritHooksClient) GerritHook(ctx context.Context, in *HookRequest, opts ...grpc.CallOption) (*HookResponse, error) {
	out := new(HookResponse)
	err := grpc.Invoke(ctx, "/gerrithooks.GerritHooks/GerritHook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritHooksClient) CreateRepository(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error) {
	out := new(CreateRepoResponse)
	err := grpc.Invoke(ctx, "/gerrithooks.GerritHooks/CreateRepository", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GerritHooks service

type GerritHooksServer interface {
	//
	// execute a hook. This is meant to be in a format so that
	// it does not require much parsing or logic on the client.
	// it throws an error if execution failed (not if code tests fail for example)
	GerritHook(context.Context, *HookRequest) (*HookResponse, error)
	//
	// create a new repository, useful for 'create module from scratch builder'
	CreateRepository(context.Context, *CreateRepoRequest) (*CreateRepoResponse, error)
}

func RegisterGerritHooksServer(s *grpc.Server, srv GerritHooksServer) {
	s.RegisterService(&_GerritHooks_serviceDesc, srv)
}

func _GerritHooks_GerritHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritHooksServer).GerritHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrithooks.GerritHooks/GerritHook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritHooksServer).GerritHook(ctx, req.(*HookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GerritHooks_CreateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritHooksServer).CreateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrithooks.GerritHooks/CreateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritHooksServer).CreateRepository(ctx, req.(*CreateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GerritHooks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gerrithooks.GerritHooks",
	HandlerType: (*GerritHooksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GerritHook",
			Handler:    _GerritHooks_GerritHook_Handler,
		},
		{
			MethodName: "CreateRepository",
			Handler:    _GerritHooks_CreateRepository_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/gerrithooks/gerrithooks.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/gerrithooks/gerrithooks.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 603 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x54, 0xcd, 0x6e, 0x13, 0x3d,
	0x14, 0xd5, 0xe4, 0xaf, 0xc9, 0xcd, 0xd7, 0xaa, 0x9f, 0x85, 0x60, 0x1a, 0x50, 0x1b, 0x46, 0x15,
	0xca, 0x2a, 0x95, 0x0a, 0x42, 0x6c, 0x9b, 0x4e, 0xa1, 0x11, 0x3f, 0x42, 0x6e, 0x11, 0xeb, 0x21,
	0x63, 0x4d, 0x4d, 0x3b, 0xbe, 0x83, 0xed, 0xb4, 0x74, 0xc1, 0xa6, 0x12, 0x2f, 0xc1, 0x12, 0x89,
	0x57, 0x64, 0x8d, 0xec, 0x71, 0x66, 0x9c, 0xb4, 0xb0, 0xca, 0x3d, 0xe7, 0x7a, 0x8e, 0xaf, 0xcf,
	0x71, 0x0c, 0x2f, 0x32, 0xbc, 0x48, 0x44, 0x36, 0x9e, 0xa1, 0x90, 0x49, 0x7a, 0x85, 0x98, 0x8e,
	0x05, 0xd3, 0x7b, 0x49, 0xc1, 0xd5, 0x5e, 0xc6, 0xa4, 0xe4, 0xfa, 0x0c, 0xf1, 0x7c, 0xa9, 0x1e,
	0x17, 0x12, 0x35, 0x92, 0xbe, 0x47, 0x0d, 0xc6, 0xff, 0x90, 0x99, 0x61, 0x9e, 0xa3, 0x70, 0x3f,
	0xe5, 0xc7, 0xd1, 0xf7, 0x00, 0xfa, 0xc7, 0x88, 0xe7, 0x94, 0x7d, 0x99, 0x33, 0xa5, 0xc9, 0x00,
	0xba, 0xc7, 0xa8, 0xb4, 0x48, 0x72, 0x16, 0x06, 0xc3, 0x60, 0xd4, 0xa3, 0x15, 0x26, 0x43, 0xe8,
	0x1f, 0x89, 0x4b, 0x2e, 0x51, 0xe4, 0x4c, 0xe8, 0xb0, 0x31, 0x6c, 0x8e, 0x7a, 0xd4, 0xa7, 0xc8,
	0x23, 0xe8, 0x1d, 0xc8, 0x6c, 0x6e, 0x6a, 0x15, 0x36, 0x6d, 0xbf, 0x26, 0x4a, 0x6d, 0x3c, 0x7f,
	0x67, 0xb4, 0x5b, 0x0b, 0xed, 0x12, 0x47, 0x14, 0xfe, 0x2b, 0xc7, 0x50, 0x05, 0x0a, 0xc5, 0xcc,
	0xda, 0xa3, 0xaf, 0x5c, 0x1f, 0x62, 0x5a, 0xce, 0xd1, 0xa6, 0x15, 0x26, 0x4f, 0x60, 0xe3, 0x44,
	0xa7, 0x38, 0xd7, 0x6f, 0x99, 0x52, 0x49, 0xc6, 0x94, 0x1b, 0x65, 0x85, 0x8d, 0x8e, 0x01, 0x28,
	0x2b, 0x50, 0x71, 0x8d, 0xf2, 0x9a, 0x6c, 0x40, 0x63, 0x1a, 0x5b, 0xad, 0x16, 0x6d, 0x4c, 0x63,
	0x72, 0x1f, 0x3a, 0x27, 0x4c, 0x5e, 0x32, 0x19, 0x36, 0xec, 0x2c, 0x0e, 0x11, 0x02, 0x2d, 0x3b,
	0x61, 0xd3, 0xb2, 0xb6, 0x8e, 0x5e, 0xc3, 0xda, 0xc7, 0x44, 0xcf, 0xce, 0x98, 0xbc, 0x25, 0x33,
	0x80, 0xee, 0xe1, 0x59, 0x22, 0x32, 0x36, 0x8d, 0x9d, 0x50, 0x85, 0xc9, 0x3d, 0x68, 0x1f, 0xe5,
	0x09, 0xbf, 0x70, 0x5a, 0x25, 0x88, 0xbe, 0x41, 0x7b, 0x32, 0xe7, 0x17, 0xe9, 0x9d, 0x52, 0x98,
	0xe7, 0x5c, 0x7b, 0x52, 0x0e, 0x93, 0x10, 0xd6, 0xde, 0x4b, 0xfc, 0xcc, 0x66, 0xda, 0x89, 0x2d,
	0x20, 0xd9, 0x84, 0xe6, 0x07, 0xfa, 0xc6, 0x19, 0x6a, 0x4a, 0x93, 0xc2, 0x29, 0xcf, 0x99, 0xd2,
	0x49, 0x5e, 0x84, 0xed, 0x61, 0x30, 0x5a, 0xa7, 0x35, 0x11, 0x4d, 0xe1, 0xff, 0x43, 0xc9, 0x12,
	0xcd, 0x8c, 0x37, 0x8b, 0xd8, 0x17, 0x87, 0x0e, 0xea, 0x43, 0x9b, 0xb8, 0x63, 0xa6, 0x66, 0x92,
	0x17, 0x9a, 0xa3, 0x70, 0x13, 0xf9, 0x54, 0xb4, 0x0b, 0xc4, 0x97, 0x72, 0xd1, 0xad, 0x1c, 0x2b,
	0xfa, 0xdd, 0x80, 0x4e, 0x79, 0x8e, 0x5b, 0x27, 0x3e, 0xf5, 0x13, 0xb2, 0x3b, 0xf4, 0xf7, 0x1f,
	0x8c, 0xfd, 0x2b, 0x5e, 0xb7, 0x27, 0x0f, 0x7f, 0xdc, 0x6c, 0x75, 0xe6, 0x5c, 0xe8, 0xe7, 0xcf,
	0x7e, 0xde, 0x6c, 0xad, 0xcb, 0xaa, 0x33, 0xe6, 0x29, 0xf5, 0x93, 0xf6, 0x23, 0x69, 0xae, 0x44,
	0xe2, 0x7b, 0xdc, 0x5a, 0xf1, 0x78, 0x08, 0xfd, 0xb2, 0xd6, 0x4c, 0x4e, 0x63, 0xeb, 0x5c, 0x8f,
	0xfa, 0x94, 0xb9, 0x79, 0x15, 0x2c, 0x93, 0xed, 0xd8, 0x45, 0x2b, 0xac, 0x49, 0x60, 0xc1, 0xa4,
	0xe1, 0x5a, 0x99, 0x40, 0x45, 0x98, 0x7d, 0x5e, 0x72, 0xa9, 0x34, 0x65, 0x97, 0x9c, 0x5d, 0x85,
	0x5d, 0xdb, 0xf7, 0x29, 0xb2, 0x6d, 0x7c, 0x31, 0x95, 0x1d, 0xa4, 0x67, 0xf7, 0xf0, 0x18, 0xb2,
	0x0b, 0xeb, 0x0e, 0xa5, 0x93, 0xeb, 0x18, 0xd3, 0x10, 0x86, 0xc1, 0xa8, 0x4b, 0x97, 0xc9, 0xfd,
	0x5f, 0x01, 0xf4, 0x5f, 0x59, 0x2f, 0xcd, 0x5f, 0x4b, 0x91, 0x03, 0x80, 0x1a, 0x92, 0x70, 0xc9,
	0x67, 0xef, 0x0d, 0x18, 0x6c, 0xdd, 0xd1, 0x71, 0xd9, 0x9e, 0xc0, 0x66, 0x9d, 0xb8, 0xb3, 0x7b,
	0x7b, 0x69, 0xf9, 0xad, 0xbb, 0x35, 0xd8, 0xf9, 0x6b, 0xbf, 0x14, 0x9d, 0x3c, 0x86, 0x1d, 0xc1,
	0xb4, 0xff, 0x64, 0x99, 0xe7, 0xca, 0xff, 0xea, 0x53, 0xc7, 0xbe, 0x56, 0x4f, 0xff, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xdd, 0xf1, 0xdd, 0x35, 0x26, 0x05, 0x00, 0x00,
}
