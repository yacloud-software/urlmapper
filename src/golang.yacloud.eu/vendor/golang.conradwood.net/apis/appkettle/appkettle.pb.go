// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/appkettle/appkettle.proto
// DO NOT EDIT!

/*
Package appkettle is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/appkettle/appkettle.proto

It has these top-level messages:
	LogEntry
	PingRequest
	PingResponse
	SetOriginRequest
	KettleOnRequest
	Kettle
	KettleInfo
*/
package appkettle

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogEntry struct {
	Direction    string `protobuf:"bytes,1,opt,name=Direction" json:"Direction,omitempty"`
	Port         uint32 `protobuf:"varint,2,opt,name=Port" json:"Port,omitempty"`
	Handle       uint32 `protobuf:"varint,3,opt,name=Handle" json:"Handle,omitempty"`
	Payload      []byte `protobuf:"bytes,4,opt,name=Payload,proto3" json:"Payload,omitempty"`
	FirstConnect bool   `protobuf:"varint,5,opt,name=FirstConnect" json:"FirstConnect,omitempty"`
	Occured      uint32 `protobuf:"varint,6,opt,name=Occured" json:"Occured,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LogEntry) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *LogEntry) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *LogEntry) GetHandle() uint32 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func (m *LogEntry) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *LogEntry) GetFirstConnect() bool {
	if m != nil {
		return m.FirstConnect
	}
	return false
}

func (m *LogEntry) GetOccured() uint32 {
	if m != nil {
		return m.Occured
	}
	return 0
}

type PingRequest struct {
	SequenceNumber uint32 `protobuf:"varint,1,opt,name=SequenceNumber" json:"SequenceNumber,omitempty"`
	Payload        string `protobuf:"bytes,2,opt,name=Payload" json:"Payload,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingRequest) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *PingRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type PingResponse struct {
	Response *PingRequest `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PingResponse) GetResponse() *PingRequest {
	if m != nil {
		return m.Response
	}
	return nil
}

type SetOriginRequest struct {
	Origin string `protobuf:"bytes,1,opt,name=Origin" json:"Origin,omitempty"`
}

func (m *SetOriginRequest) Reset()                    { *m = SetOriginRequest{} }
func (m *SetOriginRequest) String() string            { return proto.CompactTextString(m) }
func (*SetOriginRequest) ProtoMessage()               {}
func (*SetOriginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SetOriginRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

type KettleOnRequest struct {
	Origin string `protobuf:"bytes,1,opt,name=Origin" json:"Origin,omitempty"`
}

func (m *KettleOnRequest) Reset()                    { *m = KettleOnRequest{} }
func (m *KettleOnRequest) String() string            { return proto.CompactTextString(m) }
func (*KettleOnRequest) ProtoMessage()               {}
func (*KettleOnRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *KettleOnRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

type Kettle struct {
	IP   string `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *Kettle) Reset()                    { *m = Kettle{} }
func (m *Kettle) String() string            { return proto.CompactTextString(m) }
func (*Kettle) ProtoMessage()               {}
func (*Kettle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Kettle) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *Kettle) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type KettleInfo struct {
	Kettles []*Kettle `protobuf:"bytes,1,rep,name=Kettles" json:"Kettles,omitempty"`
}

func (m *KettleInfo) Reset()                    { *m = KettleInfo{} }
func (m *KettleInfo) String() string            { return proto.CompactTextString(m) }
func (*KettleInfo) ProtoMessage()               {}
func (*KettleInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *KettleInfo) GetKettles() []*Kettle {
	if m != nil {
		return m.Kettles
	}
	return nil
}

func init() {
	proto.RegisterType((*LogEntry)(nil), "appkettle.LogEntry")
	proto.RegisterType((*PingRequest)(nil), "appkettle.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "appkettle.PingResponse")
	proto.RegisterType((*SetOriginRequest)(nil), "appkettle.SetOriginRequest")
	proto.RegisterType((*KettleOnRequest)(nil), "appkettle.KettleOnRequest")
	proto.RegisterType((*Kettle)(nil), "appkettle.Kettle")
	proto.RegisterType((*KettleInfo)(nil), "appkettle.KettleInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppKettleService service

type AppKettleServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// set the origin of current kettle session
	SetOrigin(ctx context.Context, in *SetOriginRequest, opts ...grpc.CallOption) (*common.Void, error)
	// turn kettle on
	KettleOn(ctx context.Context, in *KettleOnRequest, opts ...grpc.CallOption) (*common.Void, error)
	// trigger scan for new kettles
	Scan(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// show which kettles we currently got
	Info(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*KettleInfo, error)
}

type appKettleServiceClient struct {
	cc *grpc.ClientConn
}

func NewAppKettleServiceClient(cc *grpc.ClientConn) AppKettleServiceClient {
	return &appKettleServiceClient{cc}
}

func (c *appKettleServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/appkettle.AppKettleService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appKettleServiceClient) SetOrigin(ctx context.Context, in *SetOriginRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/appkettle.AppKettleService/SetOrigin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appKettleServiceClient) KettleOn(ctx context.Context, in *KettleOnRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/appkettle.AppKettleService/KettleOn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appKettleServiceClient) Scan(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/appkettle.AppKettleService/Scan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appKettleServiceClient) Info(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*KettleInfo, error) {
	out := new(KettleInfo)
	err := grpc.Invoke(ctx, "/appkettle.AppKettleService/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppKettleService service

type AppKettleServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// set the origin of current kettle session
	SetOrigin(context.Context, *SetOriginRequest) (*common.Void, error)
	// turn kettle on
	KettleOn(context.Context, *KettleOnRequest) (*common.Void, error)
	// trigger scan for new kettles
	Scan(context.Context, *common.Void) (*common.Void, error)
	// show which kettles we currently got
	Info(context.Context, *common.Void) (*KettleInfo, error)
}

func RegisterAppKettleServiceServer(s *grpc.Server, srv AppKettleServiceServer) {
	s.RegisterService(&_AppKettleService_serviceDesc, srv)
}

func _AppKettleService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppKettleServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appkettle.AppKettleService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppKettleServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppKettleService_SetOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOriginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppKettleServiceServer).SetOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appkettle.AppKettleService/SetOrigin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppKettleServiceServer).SetOrigin(ctx, req.(*SetOriginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppKettleService_KettleOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KettleOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppKettleServiceServer).KettleOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appkettle.AppKettleService/KettleOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppKettleServiceServer).KettleOn(ctx, req.(*KettleOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppKettleService_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppKettleServiceServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appkettle.AppKettleService/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppKettleServiceServer).Scan(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppKettleService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppKettleServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appkettle.AppKettleService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppKettleServiceServer).Info(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppKettleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appkettle.AppKettleService",
	HandlerType: (*AppKettleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AppKettleService_Ping_Handler,
		},
		{
			MethodName: "SetOrigin",
			Handler:    _AppKettleService_SetOrigin_Handler,
		},
		{
			MethodName: "KettleOn",
			Handler:    _AppKettleService_KettleOn_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _AppKettleService_Scan_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _AppKettleService_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/appkettle/appkettle.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/appkettle/appkettle.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0xdf, 0x6f, 0xd3, 0x30,
	0x10, 0x56, 0xb2, 0x90, 0xb5, 0xb7, 0x6e, 0x0c, 0x4b, 0x94, 0xa8, 0xf0, 0x10, 0x45, 0x68, 0x0a,
	0x0c, 0x65, 0x52, 0x99, 0x40, 0x3c, 0x32, 0x7e, 0x88, 0x0a, 0xb4, 0x44, 0xa9, 0xc4, 0xbb, 0xe7,
	0x1c, 0x91, 0x45, 0x6b, 0x07, 0xc7, 0x05, 0xed, 0x5f, 0xe0, 0x6f, 0xe1, 0x8f, 0x44, 0x71, 0x9c,
	0x36, 0x6d, 0x35, 0x78, 0xca, 0x7d, 0x9f, 0xbf, 0x3b, 0xdf, 0x7d, 0xf1, 0xc1, 0x65, 0x29, 0x17,
	0x54, 0x94, 0x09, 0x93, 0x42, 0xd1, 0xe2, 0x97, 0x94, 0x45, 0x22, 0x50, 0x5f, 0xd0, 0x8a, 0xd7,
	0x17, 0xb4, 0xaa, 0xbe, 0xa3, 0xd6, 0x0b, 0xdc, 0x44, 0x49, 0xa5, 0xa4, 0x96, 0x64, 0xb8, 0x26,
	0x26, 0xc9, 0x3f, 0x0a, 0x30, 0xb9, 0x5c, 0x4a, 0x61, 0x3f, 0x6d, 0x6a, 0xf4, 0xc7, 0x81, 0xc1,
	0x17, 0x59, 0x7e, 0x10, 0x5a, 0xdd, 0x92, 0x27, 0x30, 0x7c, 0xcf, 0x15, 0x32, 0xcd, 0xa5, 0x08,
	0x9c, 0xd0, 0x89, 0x87, 0xf9, 0x86, 0x20, 0x04, 0xbc, 0x4c, 0x2a, 0x1d, 0xb8, 0xa1, 0x13, 0x1f,
	0xe7, 0x26, 0x26, 0x63, 0xf0, 0x3f, 0x51, 0x51, 0x2c, 0x30, 0x38, 0x30, 0xac, 0x45, 0x24, 0x80,
	0xc3, 0x8c, 0xde, 0x2e, 0x24, 0x2d, 0x02, 0x2f, 0x74, 0xe2, 0x51, 0xde, 0x41, 0x12, 0xc1, 0xe8,
	0x23, 0x57, 0xb5, 0x7e, 0x27, 0x85, 0x40, 0xa6, 0x83, 0x7b, 0xa1, 0x13, 0x0f, 0xf2, 0x2d, 0xae,
	0xc9, 0x4e, 0x19, 0x5b, 0x29, 0x2c, 0x02, 0xdf, 0x94, 0xed, 0x60, 0x94, 0xc2, 0x51, 0xc6, 0x45,
	0x99, 0xe3, 0x8f, 0x15, 0xd6, 0x9a, 0x9c, 0xc1, 0xc9, 0xbc, 0x09, 0x05, 0xc3, 0xeb, 0xd5, 0xf2,
	0x06, 0x95, 0xe9, 0xfa, 0x38, 0xdf, 0x61, 0xfb, 0xed, 0xb8, 0x66, 0xac, 0x0e, 0x46, 0x57, 0x30,
	0x6a, 0x0b, 0xd6, 0x95, 0x14, 0x35, 0x92, 0x29, 0x0c, 0xba, 0xd8, 0xd4, 0x3a, 0x9a, 0x8e, 0x93,
	0x8d, 0xdd, 0xbd, 0xbb, 0xf3, 0xb5, 0x2e, 0x7a, 0x0e, 0xa7, 0x73, 0xd4, 0xa9, 0xe2, 0x25, 0x17,
	0x5d, 0x67, 0x63, 0xf0, 0x5b, 0xc2, 0xfa, 0x68, 0x51, 0xf4, 0x0c, 0xee, 0x7f, 0x36, 0xb5, 0xd2,
	0xff, 0x4a, 0x5f, 0x80, 0xdf, 0x4a, 0xc9, 0x09, 0xb8, 0xb3, 0xcc, 0x9e, 0xba, 0xb3, 0xac, 0xf9,
	0x13, 0xd7, 0x74, 0x89, 0x76, 0x16, 0x13, 0x47, 0x6f, 0x00, 0x5a, 0xf5, 0x4c, 0x7c, 0x93, 0xe4,
	0x1c, 0x0e, 0x5b, 0x54, 0x07, 0x4e, 0x78, 0x10, 0x1f, 0x4d, 0x1f, 0xf4, 0xa6, 0x68, 0x4f, 0xf2,
	0x4e, 0x31, 0xfd, 0xed, 0xc2, 0xe9, 0xdb, 0xaa, 0x6a, 0xe1, 0x1c, 0xd5, 0x4f, 0xce, 0x90, 0xbc,
	0x06, 0xaf, 0x99, 0x96, 0xdc, 0x31, 0xfe, 0xe4, 0xd1, 0x1e, 0x6f, 0x1d, 0x7c, 0x05, 0xc3, 0xb5,
	0x1b, 0xe4, 0x71, 0x4f, 0xb5, 0xeb, 0xd1, 0x64, 0x94, 0xd8, 0xa7, 0xf8, 0x55, 0xf2, 0x82, 0x5c,
	0xc2, 0xa0, 0x73, 0x86, 0x4c, 0xf6, 0xba, 0x4d, 0xef, 0xc8, 0x8a, 0xc0, 0x9b, 0x33, 0x2a, 0xc8,
	0x16, 0xbb, 0xa3, 0x39, 0x07, 0xcf, 0x98, 0xb2, 0xad, 0x79, 0xb8, 0x77, 0x47, 0x23, 0xba, 0x3a,
	0x83, 0xa7, 0x02, 0x75, 0x7f, 0x7f, 0xec, 0x46, 0x35, 0x2b, 0xb4, 0x49, 0xb9, 0xf1, 0xcd, 0xfe,
	0xbc, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x44, 0xaf, 0x45, 0xc7, 0xb2, 0x03, 0x00, 0x00,
}
