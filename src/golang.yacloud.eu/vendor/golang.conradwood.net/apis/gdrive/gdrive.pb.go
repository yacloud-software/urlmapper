// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/gdrive/gdrive.proto
// DO NOT EDIT!

/*
Package gdrive is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/gdrive/gdrive.proto

It has these top-level messages:
	FileBlock
	ListFilesRequest
	File
	ListFilesResponse
	GetFileRequest
*/
package gdrive

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FileBlock struct {
	Size uint64 `protobuf:"varint,1,opt,name=Size" json:"Size,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *FileBlock) Reset()                    { *m = FileBlock{} }
func (m *FileBlock) String() string            { return proto.CompactTextString(m) }
func (*FileBlock) ProtoMessage()               {}
func (*FileBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FileBlock) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileBlock) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// list files on a specific team drivem, in a specific directory
type ListFilesRequest struct {
	Teamdrive string `protobuf:"bytes,1,opt,name=Teamdrive" json:"Teamdrive,omitempty"`
	Directory string `protobuf:"bytes,2,opt,name=Directory" json:"Directory,omitempty"`
}

func (m *ListFilesRequest) Reset()                    { *m = ListFilesRequest{} }
func (m *ListFilesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListFilesRequest) ProtoMessage()               {}
func (*ListFilesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListFilesRequest) GetTeamdrive() string {
	if m != nil {
		return m.Teamdrive
	}
	return ""
}

func (m *ListFilesRequest) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

type File struct {
	Id            string `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	FileExtension string `protobuf:"bytes,3,opt,name=FileExtension" json:"FileExtension,omitempty"`
	IsDirectory   bool   `protobuf:"varint,4,opt,name=IsDirectory" json:"IsDirectory,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *File) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetFileExtension() string {
	if m != nil {
		return m.FileExtension
	}
	return ""
}

func (m *File) GetIsDirectory() bool {
	if m != nil {
		return m.IsDirectory
	}
	return false
}

// response is a list of filesnames in specified directory
type ListFilesResponse struct {
	Files []*File `protobuf:"bytes,1,rep,name=Files" json:"Files,omitempty"`
}

func (m *ListFilesResponse) Reset()                    { *m = ListFilesResponse{} }
func (m *ListFilesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListFilesResponse) ProtoMessage()               {}
func (*ListFilesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListFilesResponse) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

type GetFileRequest struct {
	FileID string `protobuf:"bytes,1,opt,name=FileID" json:"FileID,omitempty"`
}

func (m *GetFileRequest) Reset()                    { *m = GetFileRequest{} }
func (m *GetFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFileRequest) ProtoMessage()               {}
func (*GetFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetFileRequest) GetFileID() string {
	if m != nil {
		return m.FileID
	}
	return ""
}

func init() {
	proto.RegisterType((*FileBlock)(nil), "gdrive.FileBlock")
	proto.RegisterType((*ListFilesRequest)(nil), "gdrive.ListFilesRequest")
	proto.RegisterType((*File)(nil), "gdrive.File")
	proto.RegisterType((*ListFilesResponse)(nil), "gdrive.ListFilesResponse")
	proto.RegisterType((*GetFileRequest)(nil), "gdrive.GetFileRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GDriveService service

type GDriveServiceClient interface {
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	GetFileAsStream(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (GDriveService_GetFileAsStreamClient, error)
	GetFileByID(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (GDriveService_GetFileByIDClient, error)
	PutFileAsStream(ctx context.Context, opts ...grpc.CallOption) (GDriveService_PutFileAsStreamClient, error)
}

type gDriveServiceClient struct {
	cc *grpc.ClientConn
}

func NewGDriveServiceClient(cc *grpc.ClientConn) GDriveServiceClient {
	return &gDriveServiceClient{cc}
}

func (c *gDriveServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := grpc.Invoke(ctx, "/gdrive.GDriveService/ListFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDriveServiceClient) GetFileAsStream(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (GDriveService_GetFileAsStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GDriveService_serviceDesc.Streams[0], c.cc, "/gdrive.GDriveService/GetFileAsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gDriveServiceGetFileAsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GDriveService_GetFileAsStreamClient interface {
	Recv() (*FileBlock, error)
	grpc.ClientStream
}

type gDriveServiceGetFileAsStreamClient struct {
	grpc.ClientStream
}

func (x *gDriveServiceGetFileAsStreamClient) Recv() (*FileBlock, error) {
	m := new(FileBlock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gDriveServiceClient) GetFileByID(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (GDriveService_GetFileByIDClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GDriveService_serviceDesc.Streams[1], c.cc, "/gdrive.GDriveService/GetFileByID", opts...)
	if err != nil {
		return nil, err
	}
	x := &gDriveServiceGetFileByIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GDriveService_GetFileByIDClient interface {
	Recv() (*FileBlock, error)
	grpc.ClientStream
}

type gDriveServiceGetFileByIDClient struct {
	grpc.ClientStream
}

func (x *gDriveServiceGetFileByIDClient) Recv() (*FileBlock, error) {
	m := new(FileBlock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gDriveServiceClient) PutFileAsStream(ctx context.Context, opts ...grpc.CallOption) (GDriveService_PutFileAsStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GDriveService_serviceDesc.Streams[2], c.cc, "/gdrive.GDriveService/PutFileAsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gDriveServicePutFileAsStreamClient{stream}
	return x, nil
}

type GDriveService_PutFileAsStreamClient interface {
	Send(*FileBlock) error
	CloseAndRecv() (*common.Void, error)
	grpc.ClientStream
}

type gDriveServicePutFileAsStreamClient struct {
	grpc.ClientStream
}

func (x *gDriveServicePutFileAsStreamClient) Send(m *FileBlock) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gDriveServicePutFileAsStreamClient) CloseAndRecv() (*common.Void, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(common.Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GDriveService service

type GDriveServiceServer interface {
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	GetFileAsStream(*common.Void, GDriveService_GetFileAsStreamServer) error
	GetFileByID(*GetFileRequest, GDriveService_GetFileByIDServer) error
	PutFileAsStream(GDriveService_PutFileAsStreamServer) error
}

func RegisterGDriveServiceServer(s *grpc.Server, srv GDriveServiceServer) {
	s.RegisterService(&_GDriveService_serviceDesc, srv)
}

func _GDriveService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDriveServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gdrive.GDriveService/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDriveServiceServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDriveService_GetFileAsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GDriveServiceServer).GetFileAsStream(m, &gDriveServiceGetFileAsStreamServer{stream})
}

type GDriveService_GetFileAsStreamServer interface {
	Send(*FileBlock) error
	grpc.ServerStream
}

type gDriveServiceGetFileAsStreamServer struct {
	grpc.ServerStream
}

func (x *gDriveServiceGetFileAsStreamServer) Send(m *FileBlock) error {
	return x.ServerStream.SendMsg(m)
}

func _GDriveService_GetFileByID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GDriveServiceServer).GetFileByID(m, &gDriveServiceGetFileByIDServer{stream})
}

type GDriveService_GetFileByIDServer interface {
	Send(*FileBlock) error
	grpc.ServerStream
}

type gDriveServiceGetFileByIDServer struct {
	grpc.ServerStream
}

func (x *gDriveServiceGetFileByIDServer) Send(m *FileBlock) error {
	return x.ServerStream.SendMsg(m)
}

func _GDriveService_PutFileAsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GDriveServiceServer).PutFileAsStream(&gDriveServicePutFileAsStreamServer{stream})
}

type GDriveService_PutFileAsStreamServer interface {
	SendAndClose(*common.Void) error
	Recv() (*FileBlock, error)
	grpc.ServerStream
}

type gDriveServicePutFileAsStreamServer struct {
	grpc.ServerStream
}

func (x *gDriveServicePutFileAsStreamServer) SendAndClose(m *common.Void) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gDriveServicePutFileAsStreamServer) Recv() (*FileBlock, error) {
	m := new(FileBlock)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GDriveService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gdrive.GDriveService",
	HandlerType: (*GDriveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFiles",
			Handler:    _GDriveService_ListFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFileAsStream",
			Handler:       _GDriveService_GetFileAsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFileByID",
			Handler:       _GDriveService_GetFileByID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutFileAsStream",
			Handler:       _GDriveService_PutFileAsStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "golang.conradwood.net/apis/gdrive/gdrive.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/gdrive/gdrive.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x95, 0xbb, 0xa1, 0x22, 0xd3, 0xee, 0x2e, 0xeb, 0xc3, 0x2a, 0x44, 0x1c, 0x42, 0xe0, 0x90,
	0x53, 0x16, 0x6d, 0x2b, 0x21, 0x71, 0x82, 0x2a, 0x50, 0x45, 0x42, 0x15, 0x4a, 0x11, 0x77, 0x93,
	0x8c, 0x2a, 0x8b, 0xc6, 0x2e, 0xb6, 0x5b, 0x28, 0x7f, 0xce, 0x0d, 0xd9, 0x75, 0x69, 0x02, 0xd5,
	0x9e, 0xec, 0x79, 0x33, 0x6f, 0xde, 0x1b, 0x7b, 0x20, 0x5f, 0xc9, 0x35, 0x13, 0xab, 0xbc, 0x96,
	0x42, 0xb1, 0xe6, 0x87, 0x94, 0x4d, 0x2e, 0xd0, 0xdc, 0xb1, 0x0d, 0xd7, 0x77, 0xab, 0x46, 0xf1,
	0x1d, 0xfa, 0x23, 0xdf, 0x28, 0x69, 0x24, 0x1d, 0x1e, 0xa2, 0xf8, 0x21, 0x5e, 0x2d, 0xdb, 0x56,
	0x0a, 0x7f, 0x1c, 0x78, 0xe9, 0x04, 0xc2, 0x0f, 0x7c, 0x8d, 0xb3, 0xb5, 0xac, 0xbf, 0x51, 0x0a,
	0xc1, 0x92, 0xff, 0xc2, 0x88, 0x24, 0x24, 0x0b, 0x2a, 0x77, 0xb7, 0x58, 0xc1, 0x0c, 0x8b, 0x06,
	0x09, 0xc9, 0xc6, 0x95, 0xbb, 0xa7, 0x0b, 0x78, 0xf2, 0x91, 0x6b, 0x63, 0x89, 0xba, 0xc2, 0xef,
	0x5b, 0xd4, 0x86, 0x3e, 0x83, 0xf0, 0x33, 0xb2, 0xd6, 0xb9, 0x70, 0x0d, 0xc2, 0xea, 0x04, 0xd8,
	0x6c, 0xc1, 0x15, 0xd6, 0x46, 0xaa, 0xbd, 0x6b, 0x15, 0x56, 0x27, 0x20, 0x55, 0x10, 0xd8, 0x5e,
	0xf4, 0x0a, 0x06, 0x65, 0xe3, 0xc9, 0x83, 0xb2, 0xb1, 0xda, 0x0b, 0xd6, 0xa2, 0x27, 0xb8, 0x3b,
	0x7d, 0x09, 0x97, 0xb6, 0xf6, 0xfd, 0x4f, 0x83, 0x42, 0x73, 0x29, 0xa2, 0x0b, 0x97, 0xec, 0x83,
	0x34, 0x81, 0x51, 0xa9, 0x4f, 0x8a, 0x41, 0x42, 0xb2, 0xc7, 0x55, 0x17, 0x4a, 0x5f, 0xc3, 0x4d,
	0x67, 0x06, 0xbd, 0x91, 0x42, 0x23, 0x4d, 0xe1, 0x91, 0x03, 0x22, 0x92, 0x5c, 0x64, 0xa3, 0xfb,
	0x71, 0xee, 0xdf, 0xd8, 0x82, 0xd5, 0x21, 0x95, 0x66, 0x70, 0x35, 0x47, 0xc7, 0x3b, 0x8e, 0x7e,
	0x0b, 0x43, 0x1b, 0x96, 0x85, 0xb7, 0xee, 0xa3, 0xfb, 0xdf, 0x04, 0x2e, 0xe7, 0x85, 0x6d, 0xb0,
	0x44, 0xb5, 0xe3, 0x35, 0xd2, 0xb7, 0x10, 0xfe, 0x15, 0xa5, 0xd1, 0xb1, 0xfb, 0xbf, 0x6f, 0x19,
	0x3f, 0x3d, 0x93, 0xf1, 0x0e, 0xa7, 0x70, 0xed, 0xd5, 0xdf, 0xe9, 0xa5, 0x51, 0xc8, 0x5a, 0x3a,
	0xce, 0xfd, 0x8f, 0x7e, 0x91, 0xbc, 0x89, 0x6f, 0xba, 0x9e, 0xdd, 0xb7, 0xbe, 0x22, 0xf4, 0x0d,
	0x8c, 0x3c, 0x6b, 0xb6, 0x2f, 0x0b, 0x7a, 0x7b, 0xac, 0xe9, 0x0f, 0x72, 0x9e, 0x3b, 0x85, 0xeb,
	0x4f, 0xdb, 0xbe, 0xe2, 0xff, 0x75, 0x71, 0xcf, 0x44, 0x46, 0x66, 0x2f, 0xe0, 0xb9, 0x40, 0xd3,
	0x5d, 0x43, 0xbf, 0x98, 0x76, 0x13, 0x3d, 0xfd, 0xeb, 0xd0, 0xed, 0xe0, 0xe4, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x13, 0x4b, 0xbe, 0x1a, 0xed, 0x02, 0x00, 0x00,
}
