// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/rpcinterceptor/rpcinterceptor.proto
// DO NOT EDIT!

/*
Package rpcinterceptor is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/rpcinterceptor/rpcinterceptor.proto

It has these top-level messages:
	InterceptRPCResponse
	InterceptRPCRequest
	InMetadata
	LogErrorRequest
	ServiceIDRequest
	ServiceIDResponse
	Learning
	Learnings
*/
package rpcinterceptor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import auth "golang.conradwood.net/apis/auth"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RejectReason int32

const (
	RejectReason_NonSpecific     RejectReason = 0
	RejectReason_UserRejected    RejectReason = 1
	RejectReason_ServiceRejected RejectReason = 2
	RejectReason_OrgRejected     RejectReason = 3
	RejectReason_UserMissing     RejectReason = 4
	RejectReason_ServiceMissing  RejectReason = 5
	RejectReason_OrgMissing      RejectReason = 6
)

var RejectReason_name = map[int32]string{
	0: "NonSpecific",
	1: "UserRejected",
	2: "ServiceRejected",
	3: "OrgRejected",
	4: "UserMissing",
	5: "ServiceMissing",
	6: "OrgMissing",
}
var RejectReason_value = map[string]int32{
	"NonSpecific":     0,
	"UserRejected":    1,
	"ServiceRejected": 2,
	"OrgRejected":     3,
	"UserMissing":     4,
	"ServiceMissing":  5,
	"OrgMissing":      6,
}

func (x RejectReason) String() string {
	return proto.EnumName(RejectReason_name, int32(x))
}
func (RejectReason) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type InterceptRPCResponse struct {
	RequestID            string           `protobuf:"bytes,1,opt,name=RequestID" json:"RequestID,omitempty"`
	CallerService        *auth.User       `protobuf:"bytes,2,opt,name=CallerService" json:"CallerService,omitempty"`
	CallerUser           *auth.User       `protobuf:"bytes,3,opt,name=CallerUser" json:"CallerUser,omitempty"`
	CallerSudoUser       *auth.User       `protobuf:"bytes,4,opt,name=CallerSudoUser" json:"CallerSudoUser,omitempty"`
	Reject               bool             `protobuf:"varint,6,opt,name=Reject" json:"Reject,omitempty"`
	RejectReason         RejectReason     `protobuf:"varint,7,opt,name=RejectReason,enum=rpcinterceptor.RejectReason" json:"RejectReason,omitempty"`
	CallerMethodID       uint64           `protobuf:"varint,8,opt,name=CallerMethodID" json:"CallerMethodID,omitempty"`
	Source               string           `protobuf:"bytes,9,opt,name=Source" json:"Source,omitempty"`
	CalleeServiceID      uint64           `protobuf:"varint,10,opt,name=CalleeServiceID" json:"CalleeServiceID,omitempty"`
	SignedCallerService  *auth.SignedUser `protobuf:"bytes,11,opt,name=SignedCallerService" json:"SignedCallerService,omitempty"`
	SignedCallerUser     *auth.SignedUser `protobuf:"bytes,12,opt,name=SignedCallerUser" json:"SignedCallerUser,omitempty"`
	SignedCallerSudoUser *auth.SignedUser `protobuf:"bytes,13,opt,name=SignedCallerSudoUser" json:"SignedCallerSudoUser,omitempty"`
}

func (m *InterceptRPCResponse) Reset()                    { *m = InterceptRPCResponse{} }
func (m *InterceptRPCResponse) String() string            { return proto.CompactTextString(m) }
func (*InterceptRPCResponse) ProtoMessage()               {}
func (*InterceptRPCResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InterceptRPCResponse) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *InterceptRPCResponse) GetCallerService() *auth.User {
	if m != nil {
		return m.CallerService
	}
	return nil
}

func (m *InterceptRPCResponse) GetCallerUser() *auth.User {
	if m != nil {
		return m.CallerUser
	}
	return nil
}

func (m *InterceptRPCResponse) GetCallerSudoUser() *auth.User {
	if m != nil {
		return m.CallerSudoUser
	}
	return nil
}

func (m *InterceptRPCResponse) GetReject() bool {
	if m != nil {
		return m.Reject
	}
	return false
}

func (m *InterceptRPCResponse) GetRejectReason() RejectReason {
	if m != nil {
		return m.RejectReason
	}
	return RejectReason_NonSpecific
}

func (m *InterceptRPCResponse) GetCallerMethodID() uint64 {
	if m != nil {
		return m.CallerMethodID
	}
	return 0
}

func (m *InterceptRPCResponse) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *InterceptRPCResponse) GetCalleeServiceID() uint64 {
	if m != nil {
		return m.CalleeServiceID
	}
	return 0
}

func (m *InterceptRPCResponse) GetSignedCallerService() *auth.SignedUser {
	if m != nil {
		return m.SignedCallerService
	}
	return nil
}

func (m *InterceptRPCResponse) GetSignedCallerUser() *auth.SignedUser {
	if m != nil {
		return m.SignedCallerUser
	}
	return nil
}

func (m *InterceptRPCResponse) GetSignedCallerSudoUser() *auth.SignedUser {
	if m != nil {
		return m.SignedCallerSudoUser
	}
	return nil
}

type InterceptRPCRequest struct {
	InMetadata *InMetadata `protobuf:"bytes,1,opt,name=InMetadata" json:"InMetadata,omitempty"`
	Service    string      `protobuf:"bytes,2,opt,name=Service" json:"Service,omitempty"`
	Method     string      `protobuf:"bytes,3,opt,name=Method" json:"Method,omitempty"`
	Source     string      `protobuf:"bytes,4,opt,name=Source" json:"Source,omitempty"`
}

func (m *InterceptRPCRequest) Reset()                    { *m = InterceptRPCRequest{} }
func (m *InterceptRPCRequest) String() string            { return proto.CompactTextString(m) }
func (*InterceptRPCRequest) ProtoMessage()               {}
func (*InterceptRPCRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InterceptRPCRequest) GetInMetadata() *InMetadata {
	if m != nil {
		return m.InMetadata
	}
	return nil
}

func (m *InterceptRPCRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *InterceptRPCRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *InterceptRPCRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

// the stuff we're transporting within a context between services
type InMetadata struct {
	RequestID       string           `protobuf:"bytes,1,opt,name=RequestID" json:"RequestID,omitempty"`
	FooBar          string           `protobuf:"bytes,2,opt,name=FooBar" json:"FooBar,omitempty"`
	UserToken       string           `protobuf:"bytes,3,opt,name=UserToken" json:"UserToken,omitempty"`
	ServiceToken    string           `protobuf:"bytes,4,opt,name=ServiceToken" json:"ServiceToken,omitempty"`
	UserID          string           `protobuf:"bytes,5,opt,name=UserID" json:"UserID,omitempty"`
	CallerMethodID  uint64           `protobuf:"varint,7,opt,name=CallerMethodID" json:"CallerMethodID,omitempty"`
	CallerServiceID uint64           `protobuf:"varint,8,opt,name=CallerServiceID" json:"CallerServiceID,omitempty"`
	RoutingInfo     uint32           `protobuf:"varint,9,opt,name=RoutingInfo" json:"RoutingInfo,omitempty"`
	Version         uint32           `protobuf:"varint,10,opt,name=Version" json:"Version,omitempty"`
	Service         *auth.User       `protobuf:"bytes,11,opt,name=Service" json:"Service,omitempty"`
	User            *auth.User       `protobuf:"bytes,12,opt,name=User" json:"User,omitempty"`
	SignedService   *auth.SignedUser `protobuf:"bytes,13,opt,name=SignedService" json:"SignedService,omitempty"`
	SignedUser      *auth.SignedUser `protobuf:"bytes,14,opt,name=SignedUser" json:"SignedUser,omitempty"`
	Trace           bool             `protobuf:"varint,15,opt,name=Trace" json:"Trace,omitempty"`
	Debug           bool             `protobuf:"varint,16,opt,name=Debug" json:"Debug,omitempty"`
}

func (m *InMetadata) Reset()                    { *m = InMetadata{} }
func (m *InMetadata) String() string            { return proto.CompactTextString(m) }
func (*InMetadata) ProtoMessage()               {}
func (*InMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *InMetadata) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *InMetadata) GetFooBar() string {
	if m != nil {
		return m.FooBar
	}
	return ""
}

func (m *InMetadata) GetUserToken() string {
	if m != nil {
		return m.UserToken
	}
	return ""
}

func (m *InMetadata) GetServiceToken() string {
	if m != nil {
		return m.ServiceToken
	}
	return ""
}

func (m *InMetadata) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *InMetadata) GetCallerMethodID() uint64 {
	if m != nil {
		return m.CallerMethodID
	}
	return 0
}

func (m *InMetadata) GetCallerServiceID() uint64 {
	if m != nil {
		return m.CallerServiceID
	}
	return 0
}

func (m *InMetadata) GetRoutingInfo() uint32 {
	if m != nil {
		return m.RoutingInfo
	}
	return 0
}

func (m *InMetadata) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *InMetadata) GetService() *auth.User {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *InMetadata) GetUser() *auth.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *InMetadata) GetSignedService() *auth.SignedUser {
	if m != nil {
		return m.SignedService
	}
	return nil
}

func (m *InMetadata) GetSignedUser() *auth.SignedUser {
	if m != nil {
		return m.SignedUser
	}
	return nil
}

func (m *InMetadata) GetTrace() bool {
	if m != nil {
		return m.Trace
	}
	return false
}

func (m *InMetadata) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

type LogErrorRequest struct {
	InMetadata     *InMetadata `protobuf:"bytes,1,opt,name=InMetadata" json:"InMetadata,omitempty"`
	Service        string      `protobuf:"bytes,2,opt,name=Service" json:"Service,omitempty"`
	Method         string      `protobuf:"bytes,3,opt,name=Method" json:"Method,omitempty"`
	ErrorCode      uint32      `protobuf:"varint,4,opt,name=ErrorCode" json:"ErrorCode,omitempty"`
	DisplayMessage string      `protobuf:"bytes,5,opt,name=DisplayMessage" json:"DisplayMessage,omitempty"`
	LogMessage     string      `protobuf:"bytes,6,opt,name=LogMessage" json:"LogMessage,omitempty"`
}

func (m *LogErrorRequest) Reset()                    { *m = LogErrorRequest{} }
func (m *LogErrorRequest) String() string            { return proto.CompactTextString(m) }
func (*LogErrorRequest) ProtoMessage()               {}
func (*LogErrorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LogErrorRequest) GetInMetadata() *InMetadata {
	if m != nil {
		return m.InMetadata
	}
	return nil
}

func (m *LogErrorRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *LogErrorRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *LogErrorRequest) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *LogErrorRequest) GetDisplayMessage() string {
	if m != nil {
		return m.DisplayMessage
	}
	return ""
}

func (m *LogErrorRequest) GetLogMessage() string {
	if m != nil {
		return m.LogMessage
	}
	return ""
}

type ServiceIDRequest struct {
	Token  string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
	MyName string `protobuf:"bytes,2,opt,name=MyName" json:"MyName,omitempty"`
}

func (m *ServiceIDRequest) Reset()                    { *m = ServiceIDRequest{} }
func (m *ServiceIDRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceIDRequest) ProtoMessage()               {}
func (*ServiceIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ServiceIDRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ServiceIDRequest) GetMyName() string {
	if m != nil {
		return m.MyName
	}
	return ""
}

type ServiceIDResponse struct {
	ServiceID uint64 `protobuf:"varint,2,opt,name=ServiceID" json:"ServiceID,omitempty"`
}

func (m *ServiceIDResponse) Reset()                    { *m = ServiceIDResponse{} }
func (m *ServiceIDResponse) String() string            { return proto.CompactTextString(m) }
func (*ServiceIDResponse) ProtoMessage()               {}
func (*ServiceIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ServiceIDResponse) GetServiceID() uint64 {
	if m != nil {
		return m.ServiceID
	}
	return 0
}

type Learning struct {
	ToServiceID   uint64 `protobuf:"varint,1,opt,name=ToServiceID" json:"ToServiceID,omitempty"`
	FromServiceID uint64 `protobuf:"varint,2,opt,name=FromServiceID" json:"FromServiceID,omitempty"`
	UserID        string `protobuf:"bytes,3,opt,name=UserID" json:"UserID,omitempty"`
	Count         uint64 `protobuf:"varint,4,opt,name=Count" json:"Count,omitempty"`
}

func (m *Learning) Reset()                    { *m = Learning{} }
func (m *Learning) String() string            { return proto.CompactTextString(m) }
func (*Learning) ProtoMessage()               {}
func (*Learning) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Learning) GetToServiceID() uint64 {
	if m != nil {
		return m.ToServiceID
	}
	return 0
}

func (m *Learning) GetFromServiceID() uint64 {
	if m != nil {
		return m.FromServiceID
	}
	return 0
}

func (m *Learning) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Learning) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Learnings struct {
	Learnings []*Learning `protobuf:"bytes,1,rep,name=Learnings" json:"Learnings,omitempty"`
}

func (m *Learnings) Reset()                    { *m = Learnings{} }
func (m *Learnings) String() string            { return proto.CompactTextString(m) }
func (*Learnings) ProtoMessage()               {}
func (*Learnings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Learnings) GetLearnings() []*Learning {
	if m != nil {
		return m.Learnings
	}
	return nil
}

func init() {
	proto.RegisterType((*InterceptRPCResponse)(nil), "rpcinterceptor.InterceptRPCResponse")
	proto.RegisterType((*InterceptRPCRequest)(nil), "rpcinterceptor.InterceptRPCRequest")
	proto.RegisterType((*InMetadata)(nil), "rpcinterceptor.InMetadata")
	proto.RegisterType((*LogErrorRequest)(nil), "rpcinterceptor.LogErrorRequest")
	proto.RegisterType((*ServiceIDRequest)(nil), "rpcinterceptor.ServiceIDRequest")
	proto.RegisterType((*ServiceIDResponse)(nil), "rpcinterceptor.ServiceIDResponse")
	proto.RegisterType((*Learning)(nil), "rpcinterceptor.Learning")
	proto.RegisterType((*Learnings)(nil), "rpcinterceptor.Learnings")
	proto.RegisterEnum("rpcinterceptor.RejectReason", RejectReason_name, RejectReason_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RPCInterceptorService service

type RPCInterceptorServiceClient interface {
	// extract useful information from a context
	InterceptRPC(ctx context.Context, in *InterceptRPCRequest, opts ...grpc.CallOption) (*InterceptRPCResponse, error)
	// log an rpc error
	LogError(ctx context.Context, in *LogErrorRequest, opts ...grpc.CallOption) (*common.Void, error)
	// get a serviceID by token (bootstrapping servers)
	GetMyServiceID(ctx context.Context, in *ServiceIDRequest, opts ...grpc.CallOption) (*ServiceIDResponse, error)
	// if in learning mode, we can retrieve what has been learned so far:
	GetLearnings(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Learnings, error)
	// reset learnings...
	ClearLearnings(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
}

type rPCInterceptorServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCInterceptorServiceClient(cc *grpc.ClientConn) RPCInterceptorServiceClient {
	return &rPCInterceptorServiceClient{cc}
}

func (c *rPCInterceptorServiceClient) InterceptRPC(ctx context.Context, in *InterceptRPCRequest, opts ...grpc.CallOption) (*InterceptRPCResponse, error) {
	out := new(InterceptRPCResponse)
	err := grpc.Invoke(ctx, "/rpcinterceptor.RPCInterceptorService/InterceptRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInterceptorServiceClient) LogError(ctx context.Context, in *LogErrorRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/rpcinterceptor.RPCInterceptorService/LogError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInterceptorServiceClient) GetMyServiceID(ctx context.Context, in *ServiceIDRequest, opts ...grpc.CallOption) (*ServiceIDResponse, error) {
	out := new(ServiceIDResponse)
	err := grpc.Invoke(ctx, "/rpcinterceptor.RPCInterceptorService/GetMyServiceID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInterceptorServiceClient) GetLearnings(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Learnings, error) {
	out := new(Learnings)
	err := grpc.Invoke(ctx, "/rpcinterceptor.RPCInterceptorService/GetLearnings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCInterceptorServiceClient) ClearLearnings(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/rpcinterceptor.RPCInterceptorService/ClearLearnings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCInterceptorService service

type RPCInterceptorServiceServer interface {
	// extract useful information from a context
	InterceptRPC(context.Context, *InterceptRPCRequest) (*InterceptRPCResponse, error)
	// log an rpc error
	LogError(context.Context, *LogErrorRequest) (*common.Void, error)
	// get a serviceID by token (bootstrapping servers)
	GetMyServiceID(context.Context, *ServiceIDRequest) (*ServiceIDResponse, error)
	// if in learning mode, we can retrieve what has been learned so far:
	GetLearnings(context.Context, *common.Void) (*Learnings, error)
	// reset learnings...
	ClearLearnings(context.Context, *common.Void) (*common.Void, error)
}

func RegisterRPCInterceptorServiceServer(s *grpc.Server, srv RPCInterceptorServiceServer) {
	s.RegisterService(&_RPCInterceptorService_serviceDesc, srv)
}

func _RPCInterceptorService_InterceptRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterceptRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInterceptorServiceServer).InterceptRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcinterceptor.RPCInterceptorService/InterceptRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInterceptorServiceServer).InterceptRPC(ctx, req.(*InterceptRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInterceptorService_LogError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInterceptorServiceServer).LogError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcinterceptor.RPCInterceptorService/LogError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInterceptorServiceServer).LogError(ctx, req.(*LogErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInterceptorService_GetMyServiceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInterceptorServiceServer).GetMyServiceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcinterceptor.RPCInterceptorService/GetMyServiceID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInterceptorServiceServer).GetMyServiceID(ctx, req.(*ServiceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInterceptorService_GetLearnings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInterceptorServiceServer).GetLearnings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcinterceptor.RPCInterceptorService/GetLearnings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInterceptorServiceServer).GetLearnings(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCInterceptorService_ClearLearnings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCInterceptorServiceServer).ClearLearnings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcinterceptor.RPCInterceptorService/ClearLearnings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCInterceptorServiceServer).ClearLearnings(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCInterceptorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcinterceptor.RPCInterceptorService",
	HandlerType: (*RPCInterceptorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InterceptRPC",
			Handler:    _RPCInterceptorService_InterceptRPC_Handler,
		},
		{
			MethodName: "LogError",
			Handler:    _RPCInterceptorService_LogError_Handler,
		},
		{
			MethodName: "GetMyServiceID",
			Handler:    _RPCInterceptorService_GetMyServiceID_Handler,
		},
		{
			MethodName: "GetLearnings",
			Handler:    _RPCInterceptorService_GetLearnings_Handler,
		},
		{
			MethodName: "ClearLearnings",
			Handler:    _RPCInterceptorService_ClearLearnings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/rpcinterceptor/rpcinterceptor.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/rpcinterceptor/rpcinterceptor.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 923 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x56, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xc6, 0xbb, 0x49, 0x36, 0x39, 0xf9, 0xe5, 0xec, 0x52, 0x99, 0x68, 0x55, 0x82, 0x59, 0xa1,
	0xb0, 0xa0, 0xb4, 0x04, 0xa9, 0x08, 0x84, 0x50, 0xb5, 0x09, 0xad, 0x2c, 0x6d, 0xda, 0x6a, 0x76,
	0x5b, 0x89, 0x4b, 0xd7, 0x9e, 0xba, 0x86, 0xec, 0x4c, 0x18, 0x3b, 0xa0, 0xbd, 0xe3, 0x8a, 0x2b,
	0xde, 0x80, 0xb7, 0xe2, 0x1d, 0xb8, 0xe2, 0x25, 0x90, 0xe7, 0x27, 0x1e, 0x3b, 0x9b, 0x70, 0xd9,
	0x9b, 0xdd, 0x7c, 0x9f, 0xbf, 0x73, 0xe6, 0xcc, 0x39, 0xdf, 0xd8, 0x03, 0xdf, 0xc7, 0x7c, 0x19,
	0xb0, 0x78, 0x12, 0x72, 0x26, 0x82, 0xe8, 0x37, 0xce, 0xa3, 0x09, 0xa3, 0xd9, 0x83, 0x60, 0x95,
	0xa4, 0x0f, 0xc4, 0x2a, 0x4c, 0x58, 0x46, 0x45, 0x48, 0x57, 0x19, 0x17, 0x15, 0x38, 0x59, 0x09,
	0x9e, 0x71, 0xec, 0x95, 0xd9, 0xe1, 0xf9, 0x9e, 0x7c, 0xc1, 0x3a, 0x7b, 0x2b, 0xff, 0xa8, 0xd8,
	0xe1, 0x64, 0x8f, 0x36, 0xe4, 0x37, 0x37, 0x9c, 0xe9, 0x7f, 0x4a, 0xef, 0xfd, 0x5d, 0x83, 0x13,
	0xdf, 0xac, 0x45, 0x5e, 0xcc, 0x08, 0x4d, 0x57, 0x9c, 0xa5, 0x14, 0x4f, 0xa1, 0x45, 0xe8, 0x2f,
	0x6b, 0x9a, 0x66, 0xfe, 0xdc, 0x75, 0x46, 0xce, 0xb8, 0x45, 0x0a, 0x02, 0x1f, 0x42, 0x77, 0x16,
	0x2c, 0x97, 0x54, 0x5c, 0x51, 0xf1, 0x6b, 0x12, 0x52, 0xf7, 0x60, 0xe4, 0x8c, 0xdb, 0x53, 0x98,
	0xc8, 0x52, 0x5e, 0xa6, 0x54, 0x90, 0xb2, 0x00, 0xcf, 0x01, 0x14, 0x91, 0x3f, 0x74, 0x0f, 0xb7,
	0xe4, 0xd6, 0x53, 0x9c, 0x42, 0x4f, 0x07, 0xaf, 0x23, 0x2e, 0xf5, 0xb5, 0x2d, 0x7d, 0x45, 0x81,
	0xf7, 0xa0, 0x41, 0xe8, 0x4f, 0x34, 0xcc, 0xdc, 0xc6, 0xc8, 0x19, 0x37, 0x89, 0x46, 0xf8, 0x18,
	0x3a, 0xea, 0x17, 0xa1, 0x41, 0xca, 0x99, 0x7b, 0x34, 0x72, 0xc6, 0xbd, 0xe9, 0xe9, 0xa4, 0xd2,
	0x79, 0x5b, 0x43, 0x4a, 0x11, 0xf8, 0xa9, 0xa9, 0x66, 0x41, 0xb3, 0xb7, 0x3c, 0xf2, 0xe7, 0x6e,
	0x73, 0xe4, 0x8c, 0x6b, 0xa4, 0xc2, 0xe6, 0x15, 0x5c, 0xf1, 0xb5, 0x08, 0xa9, 0xdb, 0x92, 0xed,
	0xd2, 0x08, 0xc7, 0xd0, 0x97, 0x4a, 0xaa, 0x5b, 0xe1, 0xcf, 0x5d, 0x90, 0x09, 0xaa, 0x34, 0x5e,
	0xc0, 0xf1, 0x55, 0x12, 0x33, 0x1a, 0x95, 0x7b, 0xdb, 0x96, 0x9b, 0x1f, 0xa8, 0xcd, 0x2b, 0x81,
	0x6c, 0xc1, 0x5d, 0x62, 0xfc, 0x0e, 0x06, 0x36, 0x2d, 0xbb, 0xd7, 0xd9, 0x91, 0x60, 0x4b, 0x89,
	0x73, 0x38, 0x29, 0x25, 0x35, 0xfd, 0xef, 0xee, 0xc8, 0x70, 0xa7, 0xda, 0xfb, 0xcb, 0x81, 0xe3,
	0xb2, 0xa9, 0xa4, 0x6f, 0xf0, 0x5b, 0x00, 0x9f, 0x2d, 0x68, 0x16, 0x44, 0x41, 0x16, 0x48, 0x53,
	0xb5, 0xa7, 0xc3, 0xea, 0x24, 0x0a, 0x05, 0xb1, 0xd4, 0xe8, 0xc2, 0x91, 0xed, 0xb5, 0x16, 0x31,
	0x30, 0xef, 0xbb, 0x9a, 0x81, 0x74, 0x55, 0x8b, 0x68, 0x64, 0xcd, 0xa3, 0x66, 0xcf, 0xc3, 0xfb,
	0xa3, 0x66, 0x97, 0xf1, 0x3f, 0x46, 0xbf, 0x07, 0x8d, 0x27, 0x9c, 0x5f, 0x04, 0x42, 0xaf, 0xaa,
	0x51, 0x1e, 0x95, 0x6f, 0xf5, 0x9a, 0xff, 0x4c, 0x99, 0x5e, 0xb7, 0x20, 0xd0, 0x83, 0x8e, 0xae,
	0x4e, 0x09, 0x54, 0x01, 0x25, 0x2e, 0xcf, 0x9c, 0x07, 0xf8, 0x73, 0xb7, 0xae, 0x32, 0x2b, 0x74,
	0x87, 0xdd, 0x8e, 0xee, 0xb4, 0x9b, 0xb1, 0x95, 0x28, 0x6c, 0xd5, 0xb4, 0x6c, 0x55, 0xd0, 0x38,
	0x82, 0x36, 0xe1, 0xeb, 0x2c, 0x61, 0xb1, 0xcf, 0xde, 0x70, 0xe9, 0xce, 0x2e, 0xb1, 0xa9, 0xbc,
	0xb9, 0xaf, 0xa8, 0x48, 0x13, 0xce, 0xa4, 0x35, 0xbb, 0xc4, 0x40, 0x3c, 0x2b, 0xda, 0xde, 0xde,
	0x3a, 0x83, 0x9b, 0x11, 0xdc, 0x87, 0x9a, 0x65, 0x34, 0x5b, 0x22, 0x79, 0x7c, 0x04, 0x5d, 0x65,
	0x14, 0x93, 0x6b, 0x97, 0x9f, 0xca, 0x32, 0x7c, 0x08, 0x50, 0x3c, 0x74, 0x7b, 0x3b, 0x82, 0x2c,
	0x0d, 0x9e, 0x40, 0xfd, 0x5a, 0x04, 0x21, 0x75, 0xfb, 0xf2, 0x2d, 0xa0, 0x40, 0xce, 0xce, 0xe9,
	0xeb, 0x75, 0xec, 0x0e, 0x14, 0x2b, 0x81, 0xf7, 0x8f, 0x03, 0xfd, 0x4b, 0x1e, 0xff, 0x20, 0x04,
	0x17, 0xef, 0xc6, 0xa2, 0xa7, 0xd0, 0x92, 0xab, 0xcf, 0x78, 0xa4, 0x5c, 0xda, 0x25, 0x05, 0x91,
	0x3b, 0x61, 0x9e, 0xa4, 0xab, 0x65, 0x70, 0xbb, 0xa0, 0x69, 0x1a, 0xc4, 0x54, 0x3b, 0xa5, 0xc2,
	0xe2, 0x7d, 0x80, 0x4b, 0x1e, 0x1b, 0x4d, 0x43, 0x6a, 0x2c, 0xc6, 0x7b, 0x0c, 0x83, 0x8d, 0x19,
	0xcc, 0x3e, 0xf3, 0x3e, 0x49, 0x6b, 0x2a, 0xc7, 0xd7, 0x37, 0x9e, 0x5c, 0xdc, 0x3e, 0x0b, 0x6e,
	0xcc, 0x06, 0x34, 0xf2, 0xbe, 0x84, 0xf7, 0xad, 0x0c, 0xc5, 0x17, 0xa2, 0xb0, 0xde, 0x81, 0xb4,
	0x5e, 0x41, 0x78, 0xbf, 0x3b, 0xd0, 0xbc, 0xa4, 0x81, 0x60, 0x09, 0x8b, 0x73, 0x07, 0x5e, 0xf3,
	0x42, 0xec, 0x48, 0xb1, 0x4d, 0xe1, 0x19, 0x74, 0x9f, 0x08, 0x7e, 0x53, 0x4d, 0x58, 0x26, 0xad,
	0x33, 0x73, 0x58, 0x3a, 0x33, 0x27, 0x50, 0x9f, 0xf1, 0x35, 0xcb, 0x64, 0x0f, 0x6b, 0x44, 0x01,
	0x6f, 0x06, 0x2d, 0x53, 0x41, 0x8a, 0x8f, 0x2c, 0xe0, 0x3a, 0xa3, 0xc3, 0x71, 0x7b, 0xea, 0x56,
	0xe7, 0x6a, 0x04, 0xa4, 0x90, 0x9e, 0xff, 0xe9, 0x94, 0x3f, 0x20, 0xd8, 0x87, 0xf6, 0x33, 0xce,
	0xae, 0x56, 0x34, 0x4c, 0xde, 0x24, 0xe1, 0xe0, 0x3d, 0x1c, 0x40, 0x47, 0xda, 0x50, 0x8a, 0x68,
	0x34, 0x70, 0xf0, 0x18, 0xfa, 0xba, 0xe6, 0x0d, 0x79, 0x90, 0xc7, 0x3d, 0x17, 0xf1, 0x86, 0x38,
	0xcc, 0x89, 0x3c, 0x6e, 0x91, 0xa4, 0x69, 0xc2, 0xe2, 0x41, 0x0d, 0x11, 0x7a, 0x3a, 0xcc, 0x70,
	0x75, 0xec, 0x01, 0x3c, 0x17, 0xb1, 0xc1, 0x8d, 0xe9, 0xbf, 0x07, 0xf0, 0x01, 0x79, 0x31, 0xf3,
	0x8b, 0xaa, 0x8d, 0xc7, 0x7e, 0x84, 0x8e, 0xfd, 0xce, 0xc5, 0x4f, 0xb6, 0x5d, 0xbb, 0xf5, 0x46,
	0x1e, 0x9e, 0xed, 0x17, 0xe9, 0x49, 0x7f, 0x03, 0x4d, 0x73, 0x4e, 0xf0, 0xa3, 0xad, 0xa6, 0x95,
	0x4f, 0xd0, 0xb0, 0x33, 0xd1, 0x17, 0x8c, 0x57, 0x3c, 0x89, 0xf0, 0x25, 0xf4, 0x9e, 0xd2, 0x6c,
	0x71, 0x6b, 0xbd, 0x8d, 0xaa, 0x09, 0xaa, 0xde, 0x1c, 0x7e, 0xbc, 0x47, 0xa1, 0x2b, 0xfa, 0x1a,
	0x3a, 0x4f, 0x69, 0x56, 0x4c, 0xb7, 0xb4, 0xe8, 0xf0, 0xc3, 0x5d, 0x83, 0x4d, 0xf1, 0x0b, 0xe8,
	0xcd, 0x96, 0x34, 0x10, 0xbb, 0x42, 0x4b, 0xe8, 0xe2, 0x73, 0xf8, 0x8c, 0xd1, 0xcc, 0xbe, 0x4c,
	0xe9, 0xeb, 0x55, 0x7e, 0x9f, 0xaa, 0x2c, 0xf2, 0xba, 0x21, 0x6f, 0x54, 0x5f, 0xfd, 0x17, 0x00,
	0x00, 0xff, 0xff, 0x56, 0x24, 0xaa, 0xfe, 0xff, 0x09, 0x00, 0x00,
}
