syntax = "proto3";

package urlmapper;
option go_package = "golang.yacloud.eu/apis/urlmapper";
option java_package = "eu.yacloud.apis.urlmapper";
import "golang.conradwood.net/apis/common/common.proto";

message JsonMapping {
  uint64 ID=1; // id of this mapping
  string Domain=2; // the domain to which this applies
  string Path=3; // the path under which can be found
  string ServiceID=4; // DEPRECATED: the serviceid in protorenderer to which refers
  string GroupID=5; // the groupid this entry requires the user to be in (to match)
  string FQDNServiceName=6; // the fqdn service name,e.g. "golang.conradwood.net/apis/registry/Registry"
  string ServiceName=7;// the registration service name,e.g. "registry.Registry"
}
message GetJsonMappingRequest {
  string Domain=1; // the domain to which this applies
  string Path=2; // the path under which can be found
}
message JsonMappingResponse {
  JsonMapping Mapping=1;
  string GRPCService=2; // name of grpc service
}
message JsonMappingResponseList {
  repeated JsonMappingResponse Responses=1;
}
message DomainList {
  repeated string Domains=1;
}
message ServiceID {
  string ID=1;
}
// via _api this can get mapped in
message AnyHostMapping {
  uint64 ID=1;
  string Path=2 [(common.sql_unique)="true"];
  string ServiceID=3; // DEPRECATED: the serviceid in protorenderer to which refers
  string ServiceName=4; // service name like it registers
  string FQDNServiceName=5; // the fqdn service name
}
message AnyMappingRequest {
  string Path=1 ;
  string ServiceName=2;
}
message AnyMappingResponse {
  string Path=1; // path it will be served on
}

message AllMapping {
  string ServiceID=1;
  string ServiceName=2;
  string Domain=3; // '*' for anyhostmapping
  string Path=4;
}

message AllMappingList {
  repeated AllMapping AllMappings=1;
}
/*
This service maps urls to backends and gRPC servers to json urls
 */
service URLMapper {
  // get json mapping for URL and user
  rpc GetJsonMappingWithUser(GetJsonMappingRequest) returns (JsonMappingResponse);
  // get json mapping for URL
  rpc GetJsonMapping(GetJsonMappingRequest) returns (JsonMappingResponse);
  // get all json mappings
  rpc GetJsonMappings(common.Void) returns (JsonMappingResponseList);
  // add a json mapping
  rpc AddJsonMapping(JsonMapping) returns (common.Void);
  // get all domains "mapped" to jsonmultiplexer
  rpc GetJsonDomains(common.Void) returns (DomainList);

  // get mappings for a service
  //  rpc GetServiceMappings(ServiceID) returns (JsonMappingResponseList);
  
  // add any host mapping
  rpc AddAnyHostMapping(AnyMappingRequest) returns (AnyMappingResponse);
  // get all mappings
  rpc GetAllMappings(common.Void)returns(AllMappingList);
}