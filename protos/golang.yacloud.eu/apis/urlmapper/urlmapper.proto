syntax = "proto3";

package urlmapper;
option go_package = "golang.yacloud.eu/apis/urlmapper";
option java_package = "eu.yacloud.apis.urlmapper";
import "golang.conradwood.net/apis/common/common.proto";

message JsonMapping {
  uint64 ID=1; // id of this mapping
  string Domain=2; // the domain to which this applies
  string Path=3; // the path under which can be found
  string ServiceID=4; // DEPRECATED: the serviceid in protorenderer to which refers
  string GroupID=5; // the groupid this entry requires the user to be in (to match)
  string FQDNServiceName=6; // the fqdn service name,e.g. "golang.conradwood.net/apis/registry/Registry"
  string ServiceName=7;// the registration service name,e.g. "registry.Registry"
  string RPC=8; // if "", applies to all RPCs
  bool Active=9; // only considered if true
}
message GetJsonMappingRequest {
  string Domain=1; // the domain to which this applies
  string Path=2; // the path under which can be found
}
message JsonMappingResponse {
  JsonMapping Mapping=1;
  string GRPCService=2; // name of grpc service
}
message JsonMappingResponseList {
  repeated JsonMappingResponse Responses=1;
}
message DomainList {
  repeated string Domains=1;
}
message ServiceID {
  string ID=1;
}
// via _api this can get mapped in
message AnyHostMapping {
  uint64 ID=1;
  string Path=2 [(common.sql_unique)="true"];
  string ServiceID=3; // DEPRECATED: the serviceid in protorenderer to which refers
  string ServiceName=4; // service name like it registers
  string FQDNServiceName=5; // the fqdn service name
  bool Active=6; // only considered it true
}
message AnyMappingRequest {
  string Path=1 ;
  string ServiceName=2;
}
message AnyMappingResponse {
  string Path=1; // path it will be served on
}

message AllMapping {
  string ServiceID=1;
  string ServiceName=2;
  string Domain=3; // '*' for anyhostmapping
  string Path=4;
  string RPC=5; // '*' for any rpc in this service
}

message AllMappingList {
  repeated AllMapping AllMappings=1;
}
message RPCMappingRequest {
  bool Expose=1;
  string FQDNServiceName=2; // e.g.  "golang.yacloud.eu/apis/urlmapper/URLMapper"
  string RPCName=3; // e.g. "SetRPCMapping"
}

message RPCMapping {
  uint64 ID=1;
  string ServiceName=2; // e.g.  "artefact.ArtefactService"
  string FQDNService=3; // e.g.  "golang.conradwood.net/apis/artefact/ArtefactService"
  string RPCName=4; // e.g. "List"
  bool Active=5; // only considered it true
}
message MappingRequest {
  string Path=1;
}
message Mapping {
  bool MappingFound=1; // true if a mapping is found for this path
  string RegistryName=2; // the name to use to lookup target rpc service in registry
  string FQDNServiceName=3;
  string RPCName=4; // the RPCName to call in the target service
}

/*
This service maps urls to backends and gRPC servers to json urls
 */
service URLMapper {
  // DEPRECATED - get json mapping for URL and user
  rpc GetJsonMappingWithUser(GetJsonMappingRequest) returns (JsonMappingResponse);
  // DEPRECATED - get json mapping for URL
  rpc GetJsonMapping(GetJsonMappingRequest) returns (JsonMappingResponse);
  // DEPRECATED - get all specific host json mappings (excluding anyhost mappings)
  rpc GetJsonMappings(common.Void) returns (JsonMappingResponseList);
  // DEPRECATED - add a json mapping
  rpc AddJsonMapping(JsonMapping) returns (common.Void);
  // DEPRECATED - get all domains "mapped" to jsonmultiplexer
  rpc GetJsonDomains(common.Void) returns (DomainList);

  // get mappings for a service
  //  rpc GetServiceMappings(ServiceID) returns (JsonMappingResponseList);
  
  // add any host mapping
  rpc AddAnyHostMapping(AnyMappingRequest) returns (AnyMappingResponse);
  // get all mappings, including anyhost and specific host mappings (useful for rendering list)
  rpc GetAllMappings(common.Void)returns(AllMappingList);
  // Expose (or unexpose) a single RPC on any URL
  rpc SetRPCMapping(RPCMappingRequest) returns (common.Void);
  // get the mapping for a full path, e.g. "/_api/golang.yacloud.eu/apis/vuehelper/Log"
  // a URL is also accepted, e.g.  "https://www.singingcat.net/_api/golang.yacloud.eu/apis/vuehelper/Log"
  rpc GetMapping(MappingRequest) returns (Mapping);
}
